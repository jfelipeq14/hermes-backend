generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model countries {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String @unique

  departments departments[]
}

model departments {
  id        Int    @id @default(autoincrement())
  code      String @unique
  name      String @unique
  idCountry Int

  countries countries @relation(fields: [idCountry], references: [id], onDelete: Cascade)

  municipalities municipalities[]
}

model municipalities {
  id           Int    @id @default(autoincrement())
  code         String @unique
  name         String @unique
  idDepartment Int

  departments departments @relation(fields: [idDepartment], references: [id], onDelete: Cascade)

  meetings     meetings[]
  reservations reservations[]
  user         User[]
}

enum Role {
  USER
  ADMIN
}

enum PrivilegeType {
  READ
  WRITE
  DELETE
  MANAGE
}

model Privilege {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  type        PrivilegeType
  description String?
  status      Boolean       @default(true)

  userPrivileges UserPrivilege[]
  permits        Permit[]
}

model UserPrivilege {
  id          String   @id @default(uuid())
  userId      Int
  privilegeId Int
  createdAt   DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  privilege Privilege @relation(fields: [privilegeId], references: [id], onDelete: Cascade)

  @@unique([userId, privilegeId])
}

model Permit {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  privilegeId Int
  status      Boolean @default(true)

  privilege Privilege @relation(fields: [privilegeId], references: [id], onDelete: Cascade)
}

// Modelos de usuarios
model User {
  id             Int      @id @unique @default(autoincrement())
  idRole         Int
  typeDocument   String
  document       Int      @unique
  name           String
  surName        String
  dateBirth      DateTime
  email          String   @unique
  password       String
  idMunicipality Int
  address        String
  phone          String   @unique
  emergency      String   @unique
  sex            String
  bloodType      String
  eps            String
  status         Boolean

  dates            dates[]
  reservations     reservations[]
  municipalities   municipalities? @relation(fields: [municipalitiesId], references: [id])
  municipalitiesId Int?
  UserPrivilege    UserPrivilege[]
}

model categoryServices {
  id   Int    @id @default(autoincrement())
  name String @unique

  services services[]
}

model services {
  id                 Int     @id @default(autoincrement())
  idCategoryServices Int
  name               String
  price              Decimal
  status             Boolean

  catergoryServices categoryServices @relation(fields: [idCategoryServices], references: [id], onDelete: Cascade)

  detailPackagesServices detailPackagesServices[]
}

model activities {
  id   Int    @id @default(autoincrement())
  name String @unique

  packages packages[]
}

model packages {
  id          Int      @id @default(autoincrement())
  activity    String
  start       DateTime
  end         DateTime
  idActivity  Int
  level       Decimal?
  price       Decimal
  reserve     Decimal
  description String?
  status      Boolean

  activities activities @relation(fields: [idActivity], references: [id], onDelete: Cascade)

  dates                  dates[]
  detailPackagesServices detailPackagesServices[]
}

model detailPackagesServices {
  id        Int     @id @default(autoincrement())
  idPackage Int
  idService Int
  quantity  Int
  price     Decimal

  packages packages @relation(fields: [idPackage], references: [id], onDelete: Cascade)
  services services @relation(fields: [idService], references: [id], onDelete: Cascade)
}

model dates {
  id                Int      @id @default(autoincrement())
  start             DateTime
  end               DateTime
  startRegistration DateTime
  endRegistration   DateTime
  idPackage         Int
  amount            Int
  idUser            Int
  status            Boolean

  packages packages @relation(fields: [idPackage], references: [id], onDelete: Cascade)
  users    User     @relation(fields: [idUser], references: [id], onDelete: Cascade)

  meetings     meetings[]
  reservations reservations[]

  @@unique([idUser, idPackage])
}

model meetings {
  id             Int      @id @default(autoincrement())
  idDate         Int
  idMunicipality Int
  hour           DateTime
  description    String

  dates          dates          @relation(fields: [idDate], references: [id], onDelete: Cascade)
  municipalities municipalities @relation(fields: [idMunicipality], references: [id], onDelete: Cascade)
}

model reservations {
  id             Int      @id @default(autoincrement())
  idDate         Int
  idMunicipality Int
  idUser         Int
  date           DateTime
  price          Int
  status         String

  dates          dates          @relation(fields: [idDate], references: [id], onDelete: Cascade)
  municipalities municipalities @relation(fields: [idMunicipality], references: [id], onDelete: Cascade)
  users          User           @relation(fields: [idUser], references: [id], onDelete: Cascade)
}
