generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model countries {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String @unique

  departments departments[]
}

model departments {
  id        Int    @id @default(autoincrement())
  code      String @unique
  name      String @unique
  idCountry Int

  countries countries @relation(fields: [idCountry], references: [id], onDelete: Cascade)

  municipalities municipalities[]
}

model municipalities {
  id           Int    @id @default(autoincrement())
  code         String @unique
  name         String @unique
  idDepartment Int

  departments departments @relation(fields: [idDepartment], references: [id], onDelete: Cascade)

  meetings     meetings[]
  reservations reservations[]
  users        users[]
}

model permits {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  status     Boolean
  privileges privileges[]
}

model privileges {
  id       Int    @id @default(autoincrement())
  name     String @unique
  idPermit Int

  permits        permits          @relation(fields: [idPermit], references: [id], onDelete: Cascade)
  rolePrivileges rolePrivileges[]
}

model roles {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  status Boolean

  rolePrivileges rolePrivileges[]
  users          users[] // Añadimos la relación con usuarios
}

model rolePrivileges {
  id          Int @id @default(autoincrement())
  idRole      Int
  idPrivilege Int

  role      roles      @relation(fields: [idRole], references: [id], onDelete: Cascade)
  privilege privileges @relation(fields: [idPrivilege], references: [id], onDelete: Cascade)
}

model users {
  id             Int      @id @unique @default(autoincrement())
  idRole         Int
  typeDocument   String
  document       String   @unique
  name           String
  surName        String
  dateBirth      DateTime
  email          String   @unique
  password       String
  idMunicipality Int
  address        String
  phone          String   @unique
  emergency      String   @unique
  sex            String
  bloodType      String
  eps            String
  status         Boolean

  role           roles          @relation(fields: [idRole], references: [id], onDelete: Cascade)
  municipalities municipalities @relation(fields: [idMunicipality], references: [id], onDelete: Cascade)

  dates                      dates[]
  reservations               reservations[]
  detailReservationTravelers detailReservationTravelers[]
}

model activities {
  id   Int    @id @default(autoincrement())
  name String @unique

  packages packages[]
}

model categoryServices {
  id   Int    @id @default(autoincrement())
  name String @unique

  services services[]
}

model services {
  id                 Int     @id @default(autoincrement())
  idCategoryServices Int
  name               String
  price              Decimal
  status             Boolean

  catergoryServices categoryServices @relation(fields: [idCategoryServices], references: [id], onDelete: Cascade)

  detailPackagesServices detailPackagesServices[]
}

model packages {
  id          Int      @id @default(autoincrement())
  activity    String
  start       DateTime
  end         DateTime
  idActivity  Int
  level       Decimal
  price       Decimal
  reserve     Decimal
  description String
  status      Boolean

  activities activities @relation(fields: [idActivity], references: [id], onDelete: Cascade)

  dates                  dates[]
  detailPackagesServices detailPackagesServices[]
}

model detailPackagesServices {
  id Int @id @default(autoincrement())

  packages  packages @relation(fields: [idPackage], references: [id], onDelete: Cascade)
  idPackage Int

  services  services @relation(fields: [idService], references: [id], onDelete: Cascade)
  idService Int

  quantity Int
  price    Decimal
}

model dates {
  id                Int      @id @default(autoincrement())
  start             DateTime
  end               DateTime
  startRegistration DateTime
  endRegistration   DateTime
  idPackage         Int
  amount            Int
  idUser            Int
  status            Boolean

  packages packages @relation(fields: [idPackage], references: [id], onDelete: Cascade)
  users    users    @relation(fields: [idUser], references: [id], onDelete: Cascade)

  meetings     meetings[]
  reservations reservations[]

  @@unique([idUser, idPackage])
}

model meetings {
  id             Int      @id @default(autoincrement())
  idDate         Int
  idMunicipality Int
  hour           DateTime
  description    String

  dates          dates          @relation(fields: [idDate], references: [id], onDelete: Cascade)
  municipalities municipalities @relation(fields: [idMunicipality], references: [id], onDelete: Cascade)
}

model reservations {
  id             Int      @id @default(autoincrement())
  idDate         Int
  idMunicipality Int
  idUser         Int
  date           DateTime
  price          Int
  status         String

  dates                      dates                        @relation(fields: [idDate], references: [id], onDelete: Cascade)
  municipalities             municipalities               @relation(fields: [idMunicipality], references: [id], onDelete: Cascade)
  users                      users                        @relation(fields: [idUser], references: [id], onDelete: Cascade)
  detailReservationTravelers detailReservationTravelers[]
}

model detailReservationTravelers {
  id            Int     @id @default(autoincrement())
  idReservation Int
  idTraveler    Int
  status        Boolean

  reservations reservations @relation(fields: [idReservation], references: [id], onDelete: Cascade)
  users        users        @relation(fields: [idTraveler], references: [id], onDelete: Cascade)
}

